<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="R1.1
x-" data-x="-3.5512907000000005" data-y="0.0002732499999993365" cx="80.24828487422417" cy="319.9800039202875" r="3" fill="hsl(226, 100%, 50%, 0.8)" />
  </g>
  <g>
    <circle data-type="point" data-label="R1.2
x+" data-x="-2.4487092999999995" data-y="-0.0002732499999993365" cx="160.9337581182621" cy="320.0199960797125" r="3" fill="hsl(227, 100%, 50%, 0.8)" />
  </g>
  <g>
    <circle data-type="point" data-label="C1.1
x-" data-x="2.4487906999999995" data-y="-0.00027334999999961695" cx="519.3264402482848" cy="320.02000339758246" r="3" fill="hsl(121, 100%, 50%, 0.8)" />
  </g>
  <g>
    <circle data-type="point" data-label="C1.2
x+" data-x="3.5512093000000005" data-y="0.00027334999999961695" cx="600" cy="319.97999660241754" r="3" fill="hsl(122, 100%, 50%, 0.8)" />
  </g>
  <g>
    <circle data-type="point" data-label="" data-x="-3.6512907000000006" data-y="0.0002732499999993365" cx="72.93041489709248" cy="319.9800039202875" r="3" fill="hsl(40, 100%, 50%, 0.9)" />
  </g>
  <g>
    <polyline data-points="-3.5512907000000005,0.0002732499999993365 2.4487906999999995,-0.00027334999999961695" data-type="line" data-label="" points="80.24828487422417,319.9800039202875 519.3264402482848,320.02000339758246" fill="none" stroke="hsl(72, 100%, 50%, 0.8)" stroke-width="1" />
  </g>
  <g>
    <polyline data-points="-3.5512907000000005,0.0002732499999993365 -3.6512907000000006,0.0002732499999993365 -3.6512907000000006,0.20027324999999935 2.2487906999999994,0.20027324999999935 2.2487906999999994,-0.00027334999999961695 2.4487906999999987,-0.00027334999999961695" data-type="line" data-label="" points="80.24828487422417,319.9800039202875 72.93041489709248,319.9800039202875 72.93041489709248,305.34426396602424 504.6907002940215,305.34426396602424 504.6907002940215,320.02000339758246 519.3264402482847,320.02000339758246" fill="none" stroke="purple" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="-3" data-y="0" x="80.24828487422417" y="305.7700103234238" width="80.68547324403792" height="28.45997935315245" fill="hsl(24, 100%, 50%, 0.8)" stroke="black" stroke-width="0.013665178571428575" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="3" data-y="0" x="519.3264402482848" y="289.2643131002939" width="80.67355975171517" height="61.47137379941216" fill="hsl(24, 100%, 50%, 0.8)" stroke="black" stroke-width="0.013665178571428575" />
  </g>
  <g>
    <rect data-type="rect" data-label="" data-x="-3.8762907000000006" data-y="0.0002732499999993365" x="40.00000000000006" y="312.6621339431559" width="32.93041489709242" height="14.635739954263329" fill="hsl(40, 100%, 50%, 0.35)" stroke="black" stroke-width="0.013665178571428575" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 73.17869977131654,
        "c": 0,
        "e": 340.12712081019276,
        "b": 0,
        "d": -73.17869977131654,
        "f": 320
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>